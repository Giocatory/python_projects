Создание и удаление объектов
1) __new__(cls, [,...]) - метод создания типа класса. Он принимает первым аргументом тип класса,
в котором он вызывается и как правило, возвращает тот же тип. В основном используется, чтобы настраивать создание
экземпяров класса тех объектов, которые наследуются от неизменяемых типов ( например, int, str или tuple)
2) __init__(self, [...]) - конструктор класса. Используется при определении объектов
3) __init_subclass__(cls) - позволяет переопределить создание подклассов объекта.
Например, добавлять дополнительные атрибуты
4) __del__(self) - деструктор класса. Вызывается автоматически сборщиком мусора, практически никогда не используется

Общие свойства объектов
1) __repr__(self) - информационная строка об объекте
2) __str__(self) - вызывается при вызове функции str(...), возвращает строковый объект
3) __bytes__(self) - аналогичто __str__ только возвращается набор байт
4) __format__(self, format_spec) - вызывается при вызове функции format(...) и используется для форматирования строки
с использованием строковых литералов

Методы сравнивания объектов между собой
1) __lt__(self, other) - определяет поведение оператора сравнения "меньше", <
2) __le__(self, other) - определяет поведение оператора сравнения "меньше или равно", <=
3) __eq__(self, other) - определяет поведение оператора "равенства"
4) __ne__(self, other) - определяет поведение оператора "неравенства"
5) __gt__(self, other) - определяет поведение оператора "больше"
6) __ge__(self, other) - определяет поведение оператора "больше или равно"
7) __hash__(self) - вызывается функцией hash(...) и используется для определения контрольной суммы объекта,
чтобы доказать его уникальность. Например, чтобы добавить объект в set, frozenset, или использовать в качестве
ключа к dict
8) __bool__(self) - вызывается функцией bool(...) и возвращает True || False в соответствии с реализацией.
Если данный метод не реализован в объекте, и объект является какой-либо последовательностью, вместо него вызывается
метод __len__. Используется в основном в условиях if

Доступ к аттрибутам оюъекта
1) __getattr__(self, name) - вызывается методом getattr(...) или при обращении к атрибуту объекта через х.у,
где х - объект, а у - атрибут
2) __setattr__(self, name, value) - вызывается методом setattr(...)
3) __delattr__(self, name) - вызывается методом  delattr(...)
4) __dir__(self) - вызывается методом dir(...) и выводит список доступных аттрибутов объекта

Создание последоватльностей
1) __len__(self) - вызывается методом len(...)
2) __getitem__(self, key) - вызывается при обращении к элементу в последовательности по его ключу (индексу).
Метод должен выбрасывать исключение TypeError, если используется не корректный тип ключа, KeyError, если данному ключу
не соответствует ни один элемент в последовательности
3) __setitem__(self, key, value) - вызывается при присваивании какого-либо значения элементу в последовательности.
Также может выбрасывать исключения
4) __delitem__(self, key) - вызывается при удалении значения в последовательности
5) __missing__(self, key) - вызывается в случаях, когда значения в последовательности не существует
6) __iter__(self) - вызывается методом iter(...) и возвращает итератор последовательности, например для использования
объекта в цикле
7) __reversed__(self) -  - вызывается методом reversed(...) и аналогичному меетоду __iter__ возвращает тот же итератор
только в обратном порядке
8) __contains__(self, item) - вызывается при проверке принадлежности элемента к последовательности
с помощью in или not in


                Числовые магические методы
Унарные операторы
1) __neg__(self) - определяет поведение для отрицания
2) __pos__(self) - определяет поведение для унарного плюса
3) __abs__(self) - определяет поведение для встроенной функции abs()
4) __invert__(self) -  - определяет поведение для инвертировани оператором ~

Обычные арифметические операторы
1) __add__(self, other) - сложение, оператор +
2) __sub__(self, other) - вычитание, оператор -
3) __mul__(self, other) - умножение, оператор *
4) __matmul__(self, other) - умножение матриц, оператор @
5) __truediv__(self, other) - деление, оператор /
6) __floordiv__(self, other) - целочисленное деление, оператор //
7) __mod__(self, other) - остаток от деления, оператор %
8) __divmod__(self, other) - деление с остатком, опрееделяет поведение для свтроенной функции divmod(...)
9) __pow__(self, other[, modulo]) - возведение в степень, оператор **
10) __and__(self, other) - двоичное И, оператор &
11) __xor__(self, other) - исключающее ИЛИ, оператор ^
12) __or__(self, other) - двоичное ИЛИ, оператор |

Преобразование типов
1) __complex__(self)
2) __int__(self)
3) __float__(self)
4) __index__(self)
5) __round__(self, [, ndigits])
6) __trunc__(self)
7) __floor__(self)
8) __ceil__(self)

Вызываемые объекты
1) __call__(self, [, args])
2) __await__(self)

Контекстные менеджеры
1) __enter__(self)
2) __exit__(self, exc_type, exc_value, traceback)
3) __aenter__(self)
4) __aexit__(self, exc_type, exc_value, traceback)