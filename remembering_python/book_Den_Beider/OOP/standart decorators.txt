    @property и @<attribute>.setter:
    Декораторы @property и @<attribute>.setter используются для
    определения свойств класса, которые позволяют контролировать доступ к атрибутам объектов.
    Они позволяют объявить методы, которые будут вызываться при чтении, записи или удалении значения атрибута.

    @staticmethod:
    Декоратор @staticmethod используется для объявления статического метода в классе.
    Статические методы не требуют доступа к экземпляру класса и могут быть вызваны непосредственно из класса.

    @classmethod:
    Декоратор @classmethod используется для объявления метода класса в Python.
    Методы класса принимают первым аргументом класс (cls), а не экземпляр класса (self).

    @abstractmethod:
    Декоратор @abstractmethod используется в абстрактных классах и объявляет метод как абстрактный,
    то есть метод, который должен быть переопределен в подклассах.
    Абстрактные методы обеспечивают интерфейс для классов-наследников, требуя их реализации.

    @lru_cache:
    Декоратор @lru_cache предоставляет механизм для кэширования результатов функции,
    используя механизм "Least Recently Used" (LRU) для ограничения размера кэша.

    @total_ordering:
    Декоратор @total_ordering позволяет автоматически генерировать методы сравнения
    (например, __eq__, __lt__, __le__) на основе определенных методов сравнения.
